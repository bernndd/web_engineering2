/*
 * Biletado services
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: dh@blaimi.de
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using personal.Attributes;
using personal.Models;
using Microsoft.AspNetCore.Connections;
using System.Net.Http;
using Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal;
using Npgsql.Internal.TypeHandlers;
using System.Runtime.CompilerServices;
using System.Security.Claims;
using Microsoft.Extensions.Primitives;
using Microsoft.AspNetCore.Authentication;
using Microsoft.Extensions.Logging;

namespace personal.Controllers
{
    /// <summary>
    /// Employee Controller
    /// </summary>
    [ApiController]
    public class EmployeeApiController : ControllerBase
    {
        private readonly DatabaseContext databaseContext;
        private readonly ILogger<EmployeeApiController> _logger;

        public EmployeeApiController(DatabaseContext dbContext, ILogger<EmployeeApiController> logger)
        {
            databaseContext = dbContext;
            _logger = logger;
        }

        /// <summary>
        /// get all employees
        /// </summary>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/personal/employees/")]
        [ValidateModelState]
        [SwaggerOperation("PersonalEmployeesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalEmployeesGet200Response), description: "successful operation")]
        public virtual IActionResult PersonalEmployeesGet()
        {
            _logger.LogInformation("GetRequest for all employees");
            var employees = databaseContext.employees;
            return new JsonResult(employees);
        }

        /// <summary>
        /// delete an employee by id
        /// </summary>
        /// <param name="id">uuid of the employee</param>
        /// <response code="204">successful operation</response>
        /// <response code="401">if no (valid) authentication is given</response>
        /// <response code="404">not found</response>
        /// <response code="422">deletion not possible because of existing assignments</response>
        [HttpDelete]
        [Route("/personal/employees/{id}/")]
        [ValidateModelState]
        [Authorize]
        [SwaggerOperation("PersonalEmployeesIdDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "if no (valid) authentication is given")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "deletion not possible because of existing assignments")]
        public virtual IActionResult PersonalEmployeesIdDelete([FromRoute(Name = "id")][Required] Guid id)
        {
            _logger.LogInformation("DeleteRequest for employee: {employeeId}", id);
            var employee = databaseContext.employees.Find(id);
            if (employee != null)
            {
                foreach (var assignement in databaseContext.assignments)
                {
                    if (assignement.employee_id == employee.id)
                    {
                        //hat noch assignements
                        _logger.LogInformation("422: deletion not possible because of existing assignments for employee: {employeeId}", id);
                        return StatusCode(422, "deletion not possible because of existing assignments");
                    }
                }
                databaseContext.Remove(employee);
                databaseContext.SaveChanges();
                _logger.LogInformation("204: successful delete operation for employee: {employeeId}", id);
                return StatusCode(204, "successful operation");
            }
            else
            {
                _logger.LogInformation("404: not found employee: {employeeId}", id);
                return StatusCode(404);
            }
        }

        /// <summary>
        /// get an employee by id
        /// </summary>
        /// <param name="id">uuid of the employee</param>
        /// <response code="200">successful operation</response>
        /// <response code="404">not found</response>
        [HttpGet]
        [Route("/personal/employees/{id}/")]
        [ValidateModelState]
        [SwaggerOperation("PersonalEmployeesIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Employee), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "not found")]
        public virtual IActionResult PersonalEmployeesIdGet([FromRoute(Name = "id")][Required] Guid id)
        {
            _logger.LogInformation("GetRequest for employee: {employeeId}", id);
            var employee = databaseContext.employees.Find(id);
            if (employee != null)
            {
                _logger.LogInformation("200: successful get operation for employee: {employeeId}", id);
                return StatusCode(200, new JsonResult(employee));
            }
            else
            {
                _logger.LogInformation("404: not found employee: {employeeId}", id);
                return StatusCode(404, default(Error));
            }

        }

        /// <summary>
        /// add or update an employee by id
        /// </summary>
        /// <remarks>if an id is supplied in the object, it MUST match with the one in the url</remarks>
        /// <param name="id">uuid of the employee</param>
        /// <param name="employee"></param>
        /// <response code="204">successful operation</response>
        /// <response code="400">invalid input</response>
        /// <response code="401">if no (valid) authentication is given</response>
        /// <response code="422">mismatching id in url and object</response>
        [HttpPut]
        [Route("/personal/employees/{id}/")]
        [Consumes("application/json")]
        [ValidateModelState]
        [Authorize]
        [SwaggerOperation("PersonalEmployeesIdPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid input")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "if no (valid) authentication is given")]
        [SwaggerResponse(statusCode: 422, type: typeof(Error), description: "mismatching id in url and object")]
        public virtual IActionResult PersonalEmployeesIdPut([FromRoute(Name = "id")][Required] Guid id, [FromBody] Employee employee)
        {
            _logger.LogInformation("UpdateRequest for employee: {employeeId}", id);
            if (employee.id == Guid.Empty)
            {
                _logger.LogInformation("422: mismatching id in url and object for employee: {employeeId}", id);
                return StatusCode(422); 
            }
            if (employee.id == id)
            {
                var exis_empl = databaseContext.employees.Find(employee.id);
                if (exis_empl != null) //id gegeben und wurde gefunden UPDATE
                {
                    exis_empl.name = employee.name;
                    databaseContext.Update(exis_empl);
                }
                else //id ist unbekannt oder wurde nicht gefunden CREATE
                {
                    databaseContext.employees.Add(employee);
                }
                databaseContext.SaveChanges();
                _logger.LogInformation("204: updated for employee: {employeeId}", id);
                return StatusCode(204);
            }
            else
            {
                _logger.LogInformation("422: mismatching id in url and object for employee: {employeeId}", id);
                return StatusCode(422, "Mismatch in ID and Object");
            }
        }

        /// <summary>
        /// add a new employee
        /// </summary>
        /// <remarks>MAY contain a uuid. If so, this method does the same checks as &#x60;PUT&#x60; does.</remarks>
        /// <param name="employee"></param>
        /// <response code="200">Successful operation of updating an existing employee. This can only happen if a uuid gets passed. </response>
        /// <response code="201">successful operation of creating a new employee</response>
        /// <response code="400">invalid input</response>
        /// <response code="401">if no (valid) authentication is given</response>
        [HttpPost]
        [Route("/personal/employees/")]
        [Consumes("application/json")]
        [ValidateModelState]
        [Authorize]
        [SwaggerOperation("PersonalEmployeesPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Employee), description: "Successful operation of updating an existing employee. This can only happen if a uuid gets passed. ")]
        [SwaggerResponse(statusCode: 201, type: typeof(Employee), description: "successful operation of creating a new employee")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "invalid input")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "if no (valid) authentication is given")]
        public virtual IActionResult PersonalEmployeesPost([FromBody] Employee employee)
        {
            _logger.LogInformation("PostRequest for employee: {employeeId}", employee.id);
            // Der 400 Statuscode wird automatisch beim umwandeln in ein GUID ausgelöst 
            if (employee.id == Guid.Empty)
            {
                //No id is given in request body So it creates employee id, pushes employee with id and name to database 
                employee.id = Guid.NewGuid();
                databaseContext.employees.Add(employee);
                databaseContext.SaveChanges();
                _logger.LogInformation("201: created new employee");
                return StatusCode(201);
            }
            else
            {
                var exis_empl = databaseContext.employees.Find(employee.id);
                if (exis_empl != null) //id gegeben und wurde gefunden UPDATE
                {
                    exis_empl.name = employee.name;
                    databaseContext.Update(exis_empl);
                    databaseContext.SaveChanges();
                    _logger.LogInformation("200: updated employee: {employeeId}", employee.id);
                    return StatusCode(200);
                }
                else //id ist unbekannt oder wurde nicht gefunden CREATE
                {
                    databaseContext.employees.Add(employee);
                    databaseContext.SaveChanges();
                    _logger.LogInformation("201: created new employee: {employeeId}", employee.id);
                    return StatusCode(201);
                }
            }
            //Validate Fehlgeschlagen --> 401
        }
    }
}
